#pragma once

/*************************************************************************************/
//
//			                    Copyright 2022 Max J. Martin
//
//			                    This file is part of Oliver.
//
//      Boost Software License - Version 1.0 - August 17th, 2003
//
//      Permission is hereby granted, free of charge, to any person or organization
//      obtaining a copy of the software and accompanying documentation covered by
//      this license(the "Software") to use, reproduce, display, distribute,
//      execute, and transmit the Software, and to prepare derivative works of the
//      Software, and to permit third - parties to whom the Software is furnished to
//      do so, all subject to the following :
//
//      The copyright notices in the Software and this entire statement, including
//      the above license grant, this restriction and the following disclaimer,
//      must be included in all copies of the Software, in whole or in part, and
//      all derivative works of the Software, unless such copies or derivative
//      works are solely in the form of machine - executable object code generated by
//      a source language processor.
//
//      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//      FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON - INFRINGEMENT.IN NO EVENT
//      SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//      FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//      ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//      DEALINGS IN THE SOFTWARE.
//			
/*************************************************************************************/

#if __cplusplus >= 202002L
#include <format>
#endif
#include <iosfwd>
#include <iostream>
#include <limits>
#include <sstream>
#include <string>
#include <string_view>
#include <typeinfo>
#include <typeindex>
#include <type_traits>
#include <utility>
#include <vector>

#ifdef _MSC_VER
#include "Windows.h"
#endif

/*  Place holder for porting over to another operating system.
#ifdef _MSC_VER

#else

#endif

*/

namespace Olly {

    /********************************************************************************************/
    //
    //                             Fundamental Type Declarations
    //
    //          The declarations below should be used throughout the entire project.
    //
    /********************************************************************************************/

    using Text        = std::string;
    using Text_Stream = std::stringstream;
    using Text_Tokens = std::vector<Text>;

    static const double NOT_A_NUMBER = std::numeric_limits<double>::quiet_NaN();

    static const std::hash<Text> DEFAULT_HASH_FUNCTION;

    template<typename S, typename T>
    class is_streamable
    {
        template<typename SS, typename TT>
        static auto test(int)
            -> decltype(std::declval<SS&>() << std::declval<TT>(), std::true_type());

        template<typename, typename>
        static auto test(...) -> std::false_type;

    public:
        static const bool value = decltype(test<S, T>(0))::value;
    };
}